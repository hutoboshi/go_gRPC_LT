// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: proto/tmp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TmpServiceClient is the client API for TmpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TmpServiceClient interface {
	UnaryRPC(ctx context.Context, in *TmpRequest, opts ...grpc.CallOption) (*TmpResponse, error)
	ServerStreamingRPC(ctx context.Context, in *TmpRequest, opts ...grpc.CallOption) (TmpService_ServerStreamingRPCClient, error)
	ClientStreamingRPC(ctx context.Context, opts ...grpc.CallOption) (TmpService_ClientStreamingRPCClient, error)
	BidirectionalStreamingRPC(ctx context.Context, opts ...grpc.CallOption) (TmpService_BidirectionalStreamingRPCClient, error)
}

type tmpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTmpServiceClient(cc grpc.ClientConnInterface) TmpServiceClient {
	return &tmpServiceClient{cc}
}

func (c *tmpServiceClient) UnaryRPC(ctx context.Context, in *TmpRequest, opts ...grpc.CallOption) (*TmpResponse, error) {
	out := new(TmpResponse)
	err := c.cc.Invoke(ctx, "/tmp.TmpService/unaryRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tmpServiceClient) ServerStreamingRPC(ctx context.Context, in *TmpRequest, opts ...grpc.CallOption) (TmpService_ServerStreamingRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &TmpService_ServiceDesc.Streams[0], "/tmp.TmpService/serverStreamingRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &tmpServiceServerStreamingRPCClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TmpService_ServerStreamingRPCClient interface {
	Recv() (*TmpResponse, error)
	grpc.ClientStream
}

type tmpServiceServerStreamingRPCClient struct {
	grpc.ClientStream
}

func (x *tmpServiceServerStreamingRPCClient) Recv() (*TmpResponse, error) {
	m := new(TmpResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tmpServiceClient) ClientStreamingRPC(ctx context.Context, opts ...grpc.CallOption) (TmpService_ClientStreamingRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &TmpService_ServiceDesc.Streams[1], "/tmp.TmpService/clientStreamingRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &tmpServiceClientStreamingRPCClient{stream}
	return x, nil
}

type TmpService_ClientStreamingRPCClient interface {
	Send(*TmpRequest) error
	CloseAndRecv() (*TmpResponse, error)
	grpc.ClientStream
}

type tmpServiceClientStreamingRPCClient struct {
	grpc.ClientStream
}

func (x *tmpServiceClientStreamingRPCClient) Send(m *TmpRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tmpServiceClientStreamingRPCClient) CloseAndRecv() (*TmpResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TmpResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tmpServiceClient) BidirectionalStreamingRPC(ctx context.Context, opts ...grpc.CallOption) (TmpService_BidirectionalStreamingRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &TmpService_ServiceDesc.Streams[2], "/tmp.TmpService/bidirectionalStreamingRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &tmpServiceBidirectionalStreamingRPCClient{stream}
	return x, nil
}

type TmpService_BidirectionalStreamingRPCClient interface {
	Send(*TmpRequest) error
	Recv() (*TmpResponse, error)
	grpc.ClientStream
}

type tmpServiceBidirectionalStreamingRPCClient struct {
	grpc.ClientStream
}

func (x *tmpServiceBidirectionalStreamingRPCClient) Send(m *TmpRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tmpServiceBidirectionalStreamingRPCClient) Recv() (*TmpResponse, error) {
	m := new(TmpResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TmpServiceServer is the server API for TmpService service.
// All implementations must embed UnimplementedTmpServiceServer
// for forward compatibility
type TmpServiceServer interface {
	UnaryRPC(context.Context, *TmpRequest) (*TmpResponse, error)
	ServerStreamingRPC(*TmpRequest, TmpService_ServerStreamingRPCServer) error
	ClientStreamingRPC(TmpService_ClientStreamingRPCServer) error
	BidirectionalStreamingRPC(TmpService_BidirectionalStreamingRPCServer) error
	mustEmbedUnimplementedTmpServiceServer()
}

// UnimplementedTmpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTmpServiceServer struct {
}

func (UnimplementedTmpServiceServer) UnaryRPC(context.Context, *TmpRequest) (*TmpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryRPC not implemented")
}
func (UnimplementedTmpServiceServer) ServerStreamingRPC(*TmpRequest, TmpService_ServerStreamingRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingRPC not implemented")
}
func (UnimplementedTmpServiceServer) ClientStreamingRPC(TmpService_ClientStreamingRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingRPC not implemented")
}
func (UnimplementedTmpServiceServer) BidirectionalStreamingRPC(TmpService_BidirectionalStreamingRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingRPC not implemented")
}
func (UnimplementedTmpServiceServer) mustEmbedUnimplementedTmpServiceServer() {}

// UnsafeTmpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TmpServiceServer will
// result in compilation errors.
type UnsafeTmpServiceServer interface {
	mustEmbedUnimplementedTmpServiceServer()
}

func RegisterTmpServiceServer(s grpc.ServiceRegistrar, srv TmpServiceServer) {
	s.RegisterService(&TmpService_ServiceDesc, srv)
}

func _TmpService_UnaryRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TmpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TmpServiceServer).UnaryRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tmp.TmpService/unaryRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TmpServiceServer).UnaryRPC(ctx, req.(*TmpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TmpService_ServerStreamingRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TmpRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TmpServiceServer).ServerStreamingRPC(m, &tmpServiceServerStreamingRPCServer{stream})
}

type TmpService_ServerStreamingRPCServer interface {
	Send(*TmpResponse) error
	grpc.ServerStream
}

type tmpServiceServerStreamingRPCServer struct {
	grpc.ServerStream
}

func (x *tmpServiceServerStreamingRPCServer) Send(m *TmpResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TmpService_ClientStreamingRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TmpServiceServer).ClientStreamingRPC(&tmpServiceClientStreamingRPCServer{stream})
}

type TmpService_ClientStreamingRPCServer interface {
	SendAndClose(*TmpResponse) error
	Recv() (*TmpRequest, error)
	grpc.ServerStream
}

type tmpServiceClientStreamingRPCServer struct {
	grpc.ServerStream
}

func (x *tmpServiceClientStreamingRPCServer) SendAndClose(m *TmpResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tmpServiceClientStreamingRPCServer) Recv() (*TmpRequest, error) {
	m := new(TmpRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TmpService_BidirectionalStreamingRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TmpServiceServer).BidirectionalStreamingRPC(&tmpServiceBidirectionalStreamingRPCServer{stream})
}

type TmpService_BidirectionalStreamingRPCServer interface {
	Send(*TmpResponse) error
	Recv() (*TmpRequest, error)
	grpc.ServerStream
}

type tmpServiceBidirectionalStreamingRPCServer struct {
	grpc.ServerStream
}

func (x *tmpServiceBidirectionalStreamingRPCServer) Send(m *TmpResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tmpServiceBidirectionalStreamingRPCServer) Recv() (*TmpRequest, error) {
	m := new(TmpRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TmpService_ServiceDesc is the grpc.ServiceDesc for TmpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TmpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tmp.TmpService",
	HandlerType: (*TmpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "unaryRPC",
			Handler:    _TmpService_UnaryRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "serverStreamingRPC",
			Handler:       _TmpService_ServerStreamingRPC_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "clientStreamingRPC",
			Handler:       _TmpService_ClientStreamingRPC_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "bidirectionalStreamingRPC",
			Handler:       _TmpService_BidirectionalStreamingRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/tmp.proto",
}
